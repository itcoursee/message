// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/message/resource.proto

package message

import (
	context "context"
	callback "github.com/itcoursee/core/callback"
	resource "github.com/itcoursee/core/resource"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Resource_Add_FullMethodName      = "/com.itcoursee.message.Resource/Add"
	Resource_Url_FullMethodName      = "/com.itcoursee.message.Resource/Url"
	Resource_Paging_FullMethodName   = "/com.itcoursee.message.Resource/Paging"
	Resource_Update_FullMethodName   = "/com.itcoursee.message.Resource/Update"
	Resource_Reviewed_FullMethodName = "/com.itcoursee.message.Resource/Reviewed"
	Resource_Delete_FullMethodName   = "/com.itcoursee.message.Resource/Delete"
)

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	// 创建
	Add(ctx context.Context, in *resource.AddReq, opts ...grpc.CallOption) (*resource.AddRsp, error)
	// 地址
	Url(ctx context.Context, in *resource.UrlReq, opts ...grpc.CallOption) (*resource.UrlRsp, error)
	// 分页
	Paging(ctx context.Context, in *resource.PagingReq, opts ...grpc.CallOption) (*resource.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *resource.UpdateReq, opts ...grpc.CallOption) (*resource.UpdateRsp, error)
	// 审核回调
	Reviewed(ctx context.Context, in *callback.ReviewedReq, opts ...grpc.CallOption) (*callback.ReviewedRsp, error)
	// 删除
	Delete(ctx context.Context, in *resource.DeleteReq, opts ...grpc.CallOption) (*resource.DeleteRsp, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Add(ctx context.Context, in *resource.AddReq, opts ...grpc.CallOption) (*resource.AddRsp, error) {
	out := new(resource.AddRsp)
	err := c.cc.Invoke(ctx, Resource_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Url(ctx context.Context, in *resource.UrlReq, opts ...grpc.CallOption) (*resource.UrlRsp, error) {
	out := new(resource.UrlRsp)
	err := c.cc.Invoke(ctx, Resource_Url_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Paging(ctx context.Context, in *resource.PagingReq, opts ...grpc.CallOption) (*resource.PagingRsp, error) {
	out := new(resource.PagingRsp)
	err := c.cc.Invoke(ctx, Resource_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Update(ctx context.Context, in *resource.UpdateReq, opts ...grpc.CallOption) (*resource.UpdateRsp, error) {
	out := new(resource.UpdateRsp)
	err := c.cc.Invoke(ctx, Resource_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Reviewed(ctx context.Context, in *callback.ReviewedReq, opts ...grpc.CallOption) (*callback.ReviewedRsp, error) {
	out := new(callback.ReviewedRsp)
	err := c.cc.Invoke(ctx, Resource_Reviewed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Delete(ctx context.Context, in *resource.DeleteReq, opts ...grpc.CallOption) (*resource.DeleteRsp, error) {
	out := new(resource.DeleteRsp)
	err := c.cc.Invoke(ctx, Resource_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	// 创建
	Add(context.Context, *resource.AddReq) (*resource.AddRsp, error)
	// 地址
	Url(context.Context, *resource.UrlReq) (*resource.UrlRsp, error)
	// 分页
	Paging(context.Context, *resource.PagingReq) (*resource.PagingRsp, error)
	// 修改
	Update(context.Context, *resource.UpdateReq) (*resource.UpdateRsp, error)
	// 审核回调
	Reviewed(context.Context, *callback.ReviewedReq) (*callback.ReviewedRsp, error)
	// 删除
	Delete(context.Context, *resource.DeleteReq) (*resource.DeleteRsp, error)
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) Add(context.Context, *resource.AddReq) (*resource.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedResourceServer) Url(context.Context, *resource.UrlReq) (*resource.UrlRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Url not implemented")
}
func (UnimplementedResourceServer) Paging(context.Context, *resource.PagingReq) (*resource.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedResourceServer) Update(context.Context, *resource.UpdateReq) (*resource.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceServer) Reviewed(context.Context, *callback.ReviewedReq) (*callback.ReviewedRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reviewed not implemented")
}
func (UnimplementedResourceServer) Delete(context.Context, *resource.DeleteReq) (*resource.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Add(ctx, req.(*resource.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Url_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.UrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Url(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Url_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Url(ctx, req.(*resource.UrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Paging(ctx, req.(*resource.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Update(ctx, req.(*resource.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Reviewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(callback.ReviewedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Reviewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Reviewed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Reviewed(ctx, req.(*callback.ReviewedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Delete(ctx, req.(*resource.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.message.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Resource_Add_Handler,
		},
		{
			MethodName: "Url",
			Handler:    _Resource_Url_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Resource_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Resource_Update_Handler,
		},
		{
			MethodName: "Reviewed",
			Handler:    _Resource_Reviewed_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Resource_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/message/resource.proto",
}
