// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/message/course.proto

package message

import (
	context "context"
	callback "github.com/itcoursee/core/callback"
	course "github.com/itcoursee/core/course"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Course_Add_FullMethodName      = "/com.itcoursee.message.Course/Add"
	Course_Review_FullMethodName   = "/com.itcoursee.message.Course/Review"
	Course_Get_FullMethodName      = "/com.itcoursee.message.Course/Get"
	Course_Paging_FullMethodName   = "/com.itcoursee.message.Course/Paging"
	Course_Update_FullMethodName   = "/com.itcoursee.message.Course/Update"
	Course_Reviewed_FullMethodName = "/com.itcoursee.message.Course/Reviewed"
	Course_Delete_FullMethodName   = "/com.itcoursee.message.Course/Delete"
)

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	// 创建
	Add(ctx context.Context, in *course.AddReq, opts ...grpc.CallOption) (*course.AddRsp, error)
	// 提交审核
	Review(ctx context.Context, in *course.ReviewReq, opts ...grpc.CallOption) (*course.ReviewRsp, error)
	// 获取
	Get(ctx context.Context, in *course.GetReq, opts ...grpc.CallOption) (*course.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *course.PagingReq, opts ...grpc.CallOption) (*course.PagingRsp, error)
	// 更新
	Update(ctx context.Context, in *course.UpdateReq, opts ...grpc.CallOption) (*course.UpdateRsp, error)
	// 审核回调
	Reviewed(ctx context.Context, in *callback.ReviewedReq, opts ...grpc.CallOption) (*callback.ReviewedRsp, error)
	// 删除
	Delete(ctx context.Context, in *course.DeleteReq, opts ...grpc.CallOption) (*course.DeleteRsp, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) Add(ctx context.Context, in *course.AddReq, opts ...grpc.CallOption) (*course.AddRsp, error) {
	out := new(course.AddRsp)
	err := c.cc.Invoke(ctx, Course_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Review(ctx context.Context, in *course.ReviewReq, opts ...grpc.CallOption) (*course.ReviewRsp, error) {
	out := new(course.ReviewRsp)
	err := c.cc.Invoke(ctx, Course_Review_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Get(ctx context.Context, in *course.GetReq, opts ...grpc.CallOption) (*course.GetRsp, error) {
	out := new(course.GetRsp)
	err := c.cc.Invoke(ctx, Course_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Paging(ctx context.Context, in *course.PagingReq, opts ...grpc.CallOption) (*course.PagingRsp, error) {
	out := new(course.PagingRsp)
	err := c.cc.Invoke(ctx, Course_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Update(ctx context.Context, in *course.UpdateReq, opts ...grpc.CallOption) (*course.UpdateRsp, error) {
	out := new(course.UpdateRsp)
	err := c.cc.Invoke(ctx, Course_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Reviewed(ctx context.Context, in *callback.ReviewedReq, opts ...grpc.CallOption) (*callback.ReviewedRsp, error) {
	out := new(callback.ReviewedRsp)
	err := c.cc.Invoke(ctx, Course_Reviewed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) Delete(ctx context.Context, in *course.DeleteReq, opts ...grpc.CallOption) (*course.DeleteRsp, error) {
	out := new(course.DeleteRsp)
	err := c.cc.Invoke(ctx, Course_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	// 创建
	Add(context.Context, *course.AddReq) (*course.AddRsp, error)
	// 提交审核
	Review(context.Context, *course.ReviewReq) (*course.ReviewRsp, error)
	// 获取
	Get(context.Context, *course.GetReq) (*course.GetRsp, error)
	// 分页
	Paging(context.Context, *course.PagingReq) (*course.PagingRsp, error)
	// 更新
	Update(context.Context, *course.UpdateReq) (*course.UpdateRsp, error)
	// 审核回调
	Reviewed(context.Context, *callback.ReviewedReq) (*callback.ReviewedRsp, error)
	// 删除
	Delete(context.Context, *course.DeleteReq) (*course.DeleteRsp, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) Add(context.Context, *course.AddReq) (*course.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCourseServer) Review(context.Context, *course.ReviewReq) (*course.ReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Review not implemented")
}
func (UnimplementedCourseServer) Get(context.Context, *course.GetReq) (*course.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCourseServer) Paging(context.Context, *course.PagingReq) (*course.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedCourseServer) Update(context.Context, *course.UpdateReq) (*course.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCourseServer) Reviewed(context.Context, *callback.ReviewedReq) (*callback.ReviewedRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reviewed not implemented")
}
func (UnimplementedCourseServer) Delete(context.Context, *course.DeleteReq) (*course.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Add(ctx, req.(*course.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Review_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.ReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Review(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Review_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Review(ctx, req.(*course.ReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Get(ctx, req.(*course.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Paging(ctx, req.(*course.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Update(ctx, req.(*course.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Reviewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(callback.ReviewedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Reviewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Reviewed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Reviewed(ctx, req.(*callback.ReviewedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(course.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).Delete(ctx, req.(*course.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.message.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Course_Add_Handler,
		},
		{
			MethodName: "Review",
			Handler:    _Course_Review_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Course_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Course_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Course_Update_Handler,
		},
		{
			MethodName: "Reviewed",
			Handler:    _Course_Reviewed_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Course_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/message/course.proto",
}
