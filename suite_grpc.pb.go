// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: com/itcoursee/message/suite.proto

package message

import (
	context "context"
	suite "github.com/itcoursee/core/suite"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// 创建
	Add(ctx context.Context, in *suite.AddReq, opts ...grpc.CallOption) (*suite.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *suite.GetReq, opts ...grpc.CallOption) (*suite.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *suite.PagingReq, opts ...grpc.CallOption) (*suite.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *suite.UpdateReq, opts ...grpc.CallOption) (*suite.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *suite.DeleteReq, opts ...grpc.CallOption) (*suite.DeleteRsp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) Add(ctx context.Context, in *suite.AddReq, opts ...grpc.CallOption) (*suite.AddRsp, error) {
	out := new(suite.AddRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.message.Group/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Get(ctx context.Context, in *suite.GetReq, opts ...grpc.CallOption) (*suite.GetRsp, error) {
	out := new(suite.GetRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.message.Group/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Paging(ctx context.Context, in *suite.PagingReq, opts ...grpc.CallOption) (*suite.PagingRsp, error) {
	out := new(suite.PagingRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.message.Group/Paging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Update(ctx context.Context, in *suite.UpdateReq, opts ...grpc.CallOption) (*suite.UpdateRsp, error) {
	out := new(suite.UpdateRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.message.Group/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Delete(ctx context.Context, in *suite.DeleteReq, opts ...grpc.CallOption) (*suite.DeleteRsp, error) {
	out := new(suite.DeleteRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.message.Group/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility
type GroupServer interface {
	// 创建
	Add(context.Context, *suite.AddReq) (*suite.AddRsp, error)
	// 获取
	Get(context.Context, *suite.GetReq) (*suite.GetRsp, error)
	// 分页
	Paging(context.Context, *suite.PagingReq) (*suite.PagingRsp, error)
	// 修改
	Update(context.Context, *suite.UpdateReq) (*suite.UpdateRsp, error)
	// 删除
	Delete(context.Context, *suite.DeleteReq) (*suite.DeleteRsp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) Add(context.Context, *suite.AddReq) (*suite.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGroupServer) Get(context.Context, *suite.GetReq) (*suite.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupServer) Paging(context.Context, *suite.PagingReq) (*suite.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedGroupServer) Update(context.Context, *suite.UpdateReq) (*suite.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupServer) Delete(context.Context, *suite.DeleteReq) (*suite.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.message.Group/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Add(ctx, req.(*suite.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.message.Group/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Get(ctx, req.(*suite.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.message.Group/Paging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Paging(ctx, req.(*suite.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.message.Group/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Update(ctx, req.(*suite.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.message.Group/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Delete(ctx, req.(*suite.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.message.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Group_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Group_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Group_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Group_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Group_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/message/suite.proto",
}
