// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/message/suite.proto

package message

import (
	context "context"
	suite "github.com/itcoursee/core/suite"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Suite_Add_FullMethodName    = "/com.itcoursee.message.Suite/Add"
	Suite_Get_FullMethodName    = "/com.itcoursee.message.Suite/Get"
	Suite_Paging_FullMethodName = "/com.itcoursee.message.Suite/Paging"
	Suite_Update_FullMethodName = "/com.itcoursee.message.Suite/Update"
	Suite_Delete_FullMethodName = "/com.itcoursee.message.Suite/Delete"
)

// SuiteClient is the client API for Suite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuiteClient interface {
	// 创建
	Add(ctx context.Context, in *suite.AddReq, opts ...grpc.CallOption) (*suite.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *suite.GetReq, opts ...grpc.CallOption) (*suite.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *suite.PagingReq, opts ...grpc.CallOption) (*suite.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *suite.UpdateReq, opts ...grpc.CallOption) (*suite.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *suite.DeleteReq, opts ...grpc.CallOption) (*suite.DeleteRsp, error)
}

type suiteClient struct {
	cc grpc.ClientConnInterface
}

func NewSuiteClient(cc grpc.ClientConnInterface) SuiteClient {
	return &suiteClient{cc}
}

func (c *suiteClient) Add(ctx context.Context, in *suite.AddReq, opts ...grpc.CallOption) (*suite.AddRsp, error) {
	out := new(suite.AddRsp)
	err := c.cc.Invoke(ctx, Suite_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Get(ctx context.Context, in *suite.GetReq, opts ...grpc.CallOption) (*suite.GetRsp, error) {
	out := new(suite.GetRsp)
	err := c.cc.Invoke(ctx, Suite_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Paging(ctx context.Context, in *suite.PagingReq, opts ...grpc.CallOption) (*suite.PagingRsp, error) {
	out := new(suite.PagingRsp)
	err := c.cc.Invoke(ctx, Suite_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Update(ctx context.Context, in *suite.UpdateReq, opts ...grpc.CallOption) (*suite.UpdateRsp, error) {
	out := new(suite.UpdateRsp)
	err := c.cc.Invoke(ctx, Suite_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Delete(ctx context.Context, in *suite.DeleteReq, opts ...grpc.CallOption) (*suite.DeleteRsp, error) {
	out := new(suite.DeleteRsp)
	err := c.cc.Invoke(ctx, Suite_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuiteServer is the server API for Suite service.
// All implementations must embed UnimplementedSuiteServer
// for forward compatibility
type SuiteServer interface {
	// 创建
	Add(context.Context, *suite.AddReq) (*suite.AddRsp, error)
	// 获取
	Get(context.Context, *suite.GetReq) (*suite.GetRsp, error)
	// 分页
	Paging(context.Context, *suite.PagingReq) (*suite.PagingRsp, error)
	// 修改
	Update(context.Context, *suite.UpdateReq) (*suite.UpdateRsp, error)
	// 删除
	Delete(context.Context, *suite.DeleteReq) (*suite.DeleteRsp, error)
	mustEmbedUnimplementedSuiteServer()
}

// UnimplementedSuiteServer must be embedded to have forward compatible implementations.
type UnimplementedSuiteServer struct {
}

func (UnimplementedSuiteServer) Add(context.Context, *suite.AddReq) (*suite.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedSuiteServer) Get(context.Context, *suite.GetReq) (*suite.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSuiteServer) Paging(context.Context, *suite.PagingReq) (*suite.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedSuiteServer) Update(context.Context, *suite.UpdateReq) (*suite.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSuiteServer) Delete(context.Context, *suite.DeleteReq) (*suite.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSuiteServer) mustEmbedUnimplementedSuiteServer() {}

// UnsafeSuiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuiteServer will
// result in compilation errors.
type UnsafeSuiteServer interface {
	mustEmbedUnimplementedSuiteServer()
}

func RegisterSuiteServer(s grpc.ServiceRegistrar, srv SuiteServer) {
	s.RegisterService(&Suite_ServiceDesc, srv)
}

func _Suite_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Add(ctx, req.(*suite.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Get(ctx, req.(*suite.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Paging(ctx, req.(*suite.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Update(ctx, req.(*suite.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Delete(ctx, req.(*suite.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Suite_ServiceDesc is the grpc.ServiceDesc for Suite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Suite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.message.Suite",
	HandlerType: (*SuiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Suite_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Suite_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Suite_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Suite_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Suite_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/message/suite.proto",
}
